<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2021/11/19/cong-0-kai-shi-html5/1/"/>
      <url>/2021/11/19/cong-0-kai-shi-html5/1/</url>
      
        <content type="html"><![CDATA[<video src=""></video><input type="file" multiple="multiple">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>从0开始HTML5</title>
      <link href="/2021/11/19/cong-0-kai-shi-html5/"/>
      <url>/2021/11/19/cong-0-kai-shi-html5/</url>
      
        <content type="html"><![CDATA[<h1 id="从0开始HTML5"><a href="#从0开始HTML5" class="headerlink" title="从0开始HTML5"></a>从0开始HTML5</h1><hr><h2 id="1-HTML5新特性"><a href="#1-HTML5新特性" class="headerlink" title="1. HTML5新特性"></a>1. HTML5新特性</h2><p>HTML5的新特性主要是针对以前的不足，增加了一些新的标签、表单与属性。<br>这些特性都有兼容性问题，IE9以下需要慎重使用。</p><hr><h2 id="2-新增语义化标签"><a href="#2-新增语义化标签" class="headerlink" title="2.新增语义化标签"></a>2.新增语义化标签</h2><ul><li><code>&lt;header&gt;</code>:头部标签</li><li><code>&lt;nav&gt;</code>:导航标签</li><li><code>&lt;article&gt;</code>:内容标签</li><li><code>&lt;section&gt;</code>:定义文档某个区域</li><li><code>&lt;aside&gt;</code>:侧边栏标签</li><li><code>&lt;footer&gt;</code>:尾部标签<img src="/2021/11/19/cong-0-kai-shi-html5/1.png" class="">注意：</li><li>这种语义化标准主要是针对搜索引擎的</li><li>这些新标签可以在页面中多次使用</li><li>移动端没有兼容性问题，可以放心大胆的用</li></ul><hr><h2 id="3-H5新增视频标签"><a href="#3-H5新增视频标签" class="headerlink" title="3. H5新增视频标签"></a>3. H5新增视频标签</h2><ul><li>语法<pre class="line-numbers language-none"><code class="language-none">&lt;video src&#x3D;&quot;文件地址&quot; controls&#x3D;&quot;controls&quot;&gt;&lt;&#x2F;video&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>可选属性<img src="/2021/11/19/cong-0-kai-shi-html5/2.png" class=""></li></ul><hr><h2 id="4-H5新增音频标签"><a href="#4-H5新增音频标签" class="headerlink" title="4. H5新增音频标签"></a>4. H5新增音频标签</h2><ul><li>语法<pre class="line-numbers language-none"><code class="language-none">&lt;audio src&#x3D;&quot;文件地址&quot; controls&#x3D;&quot;controls&quot;&gt;&lt;&#x2F;audio&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>可选属性<img src="/2021/11/19/cong-0-kai-shi-html5/3.png" class=""></li></ul><blockquote><p>需要注意的是，Chrome浏览器是禁止音视频自动播放的</p></blockquote><hr><h2 id="5-H5新增input"><a href="#5-H5新增input" class="headerlink" title="5. H5新增input"></a>5. H5新增input</h2><ul><li>语法<pre class="line-numbers language-none"><code class="language-none">&lt;!-- 验证的时候必须添加form表单域 --&gt;&lt;form action&#x3D;&quot;&quot;&gt;    &lt;ul&gt;        &lt;li&gt;邮箱：&lt;input type&#x3D;&quot;email&quot;&gt;&lt;&#x2F;input&gt;&lt;&#x2F;li&gt;        &lt;li&gt;网址：&lt;input type&#x3D;&quot;url&quot;&gt;&lt;&#x2F;input&gt;&lt;&#x2F;li&gt;        &lt;li&gt;日期：&lt;input type&#x3D;&quot;date&quot;&gt;&lt;&#x2F;input&gt;&lt;&#x2F;li&gt;        &lt;li&gt;日期：&lt;input type&#x3D;&quot;time&quot;&gt;&lt;&#x2F;input&gt;&lt;&#x2F;li&gt;        &lt;li&gt;数量：&lt;input type&#x3D;&quot;number&quot;&gt;&lt;&#x2F;input&gt;&lt;&#x2F;li&gt;        &lt;li&gt;手机号码：&lt;input type&#x3D;&quot;tel&quot;&gt;&lt;&#x2F;input&gt;&lt;&#x2F;li&gt;        &lt;li&gt;搜索：&lt;input type&#x3D;&quot;search&quot;&gt;&lt;&#x2F;input&gt;&lt;&#x2F;li&gt;        &lt;li&gt;颜色：&lt;input type&#x3D;&quot;color&quot;&gt;&lt;&#x2F;input&gt;&lt;&#x2F;li&gt;        &lt;!--点击提交按钮就可以进行表单验证 --&gt;        &lt;li&gt;&lt;input type&#x3D;&quot;submit&quot;&gt;&lt;&#x2F;input&gt;&lt;&#x2F;li&gt;    &lt;&#x2F;ul&gt;&lt;&#x2F;form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>属性<img src="/2021/11/19/cong-0-kai-shi-html5/4.png" class=""></li></ul><blockquote><p>但是表单验证一般是自己写正则了，不一定用h5自带的这个</p></blockquote><hr><h2 id="6-H5新增表单属性"><a href="#6-H5新增表单属性" class="headerlink" title="6. H5新增表单属性"></a>6. H5新增表单属性</h2><ul><li>语法<pre class="line-numbers language-none"><code class="language-none">&lt;input required&#x3D;&quot;required&quot;&gt;&lt;&#x2F;input&gt;&lt;input placeholder&#x3D;&quot;请输入内容&quot;&gt;&lt;&#x2F;input&gt;&lt;input autofocus&#x3D;&quot;autofocus&quot;&gt;&lt;&#x2F;input&gt;&lt;input autocomplete&#x3D;&quot;off&quot;&gt;&lt;&#x2F;input&gt;&lt;input type&#x3D;&quot;file&quot; multiple&#x3D;&quot;multiple&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>属性<img src="/2021/11/19/cong-0-kai-shi-html5/5.png" class=""></li></ul><hr><h2 id="7-html常用实体符号"><a href="#7-html常用实体符号" class="headerlink" title="7. html常用实体符号"></a>7. html常用实体符号</h2><img src="/2021/11/19/cong-0-kai-shi-html5/6.png" class="">]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css常用居中</title>
      <link href="/2021/11/19/css-chang-yong-ju-zhong/"/>
      <url>/2021/11/19/css-chang-yong-ju-zhong/</url>
      
        <content type="html"><![CDATA[<h1 id="css常用居中"><a href="#css常用居中" class="headerlink" title="css常用居中"></a>css常用居中</h1><p>css中，对齐是经常要用到的，不论是水平还是垂直。</p><hr><h2 id="1-水平居中"><a href="#1-水平居中" class="headerlink" title="1.水平居中"></a>1.水平居中</h2><h3 id="1-1-元素水平居中"><a href="#1-1-元素水平居中" class="headerlink" title="1.1 元素水平居中"></a>1.1 元素水平居中</h3><ul><li>标准流块元素水平居中，一般使用<code>margin:auto;</code>。同时要设置元素的宽度，剩余的空间会在元素的两个外边距之间平均分配</li></ul><blockquote><p>注意如果未设置宽度或宽度为100%，对齐会无效</p></blockquote><pre class="line-numbers language-none"><code class="language-none">.center &#123;  margin: auto;  width: 50%;  border: 3px solid green;  padding: 20px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>非标准流需要使用position与transform配合进行居中</li></ul><h3 id="1-2-文字水平居中"><a href="#1-2-文字水平居中" class="headerlink" title="1.2 文字水平居中"></a>1.2 文字水平居中</h3><ul><li>文字水平居中的方式非常简单，即为<code>text-align:center;</code><pre class="line-numbers language-none"><code class="language-none">.center &#123;  text-align: center;  border: 3px solid green;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/11/19/css-chang-yong-ju-zhong/01.png" class=""></li></ul><h3 id="1-3-图像水平居中"><a href="#1-3-图像水平居中" class="headerlink" title="1.3 图像水平居中"></a>1.3 图像水平居中</h3><ul><li>图片要实现水平居中首先要将图片转换为<strong>块元素</strong>，再设置<code>margin:auto</code>即可<pre class="line-numbers language-none"><code class="language-none">img &#123;  display: block;  margin-left: auto;  margin-right: auto;  width: 40%;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h2 id="2-垂直居中"><a href="#2-垂直居中" class="headerlink" title="2. 垂直居中"></a>2. 垂直居中</h2><h3 id="2-1-元素垂直居中"><a href="#2-1-元素垂直居中" class="headerlink" title="2.1 元素垂直居中"></a>2.1 元素垂直居中</h3><ul><li>可以给父元素使用<code>padding</code>进行居中（我很少用）<pre class="line-numbers language-none"><code class="language-none">.center &#123;  padding: 70px 0;  border: 3px solid green;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>通常可以用<code>position</code>配合<code>transform</code>来进行垂直居中<pre class="line-numbers language-none"><code class="language-none">.father &#123;   height: 200px;  position: relative;  border: 3px solid green; &#125;.son  &#123;  margin: 0;  position: absolute;  left: 50%;  transform: translateY(-50%);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用flex布局实现垂直居中<pre class="line-numbers language-none"><code class="language-none">center &#123;  display: flex;  align-items: center;  height: 200px;  border: 3px solid green; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-2-文字垂直居中"><a href="#2-2-文字垂直居中" class="headerlink" title="2.2 文字垂直居中"></a>2.2 文字垂直居中</h3><ul><li>一般文字垂直居中很简单，只需要让文字的行高等于盒子高度即可。<pre class="line-numbers language-none"><code class="language-none">.box &#123;  height:200px;  line-height:200px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h2 id="3-图片和文字一行时垂直居中"><a href="#3-图片和文字一行时垂直居中" class="headerlink" title="3. 图片和文字一行时垂直居中"></a>3. 图片和文字一行时垂直居中</h2><ul><li>可以给图片加上<code>vertical-align：middle</code>配合<code>line-height</code>一起使用<pre class="line-numbers language-none"><code class="language-none">div &#123;  height: 200px;  background-color: dodgerblue;  line-height: 200px;&#125;img &#123;  width: 600px;  vertical-align: middle;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>也可以给父元素<code>display:flex</code>两行代码解决问题<pre class="line-numbers language-none"><code class="language-none">.father &#123;  display:flex;  align-items:center;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6模块化</title>
      <link href="/2021/11/18/es6-mo-kuai-hua/"/>
      <url>/2021/11/18/es6-mo-kuai-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6模块化"><a href="#ES6模块化" class="headerlink" title="ES6模块化"></a>ES6模块化</h1><p>ES6新增了模块化，包含两个部分，export与import，让JavaScript支持了module。</p><hr><h2 id="1-默认暴露"><a href="#1-默认暴露" class="headerlink" title="1. 默认暴露"></a>1. 默认暴露</h2><p> 以暴露100为例，写法为</p><pre class="line-numbers language-none"><code class="language-none">export defalut 100<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 暴露的其实是一个<strong>对象</strong>，以default为属性，default后面的为值<br> 引入时的写法即为</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; a &#x3D; 100import a form &#39;.&#x2F;xxx.js&#39; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>完整的写法如下，其实是一个对象的解构，由于default是关键字不能直接解构，而且书写复杂，所以简化了写法。</p><pre class="line-numbers language-none"><code class="language-none">import &#123;default as a&#125; from &#39;.&#x2F;xxx.js&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再比如如下写法</p><pre class="line-numbers language-none"><code class="language-none">export default &#123;    a:100,    b:10&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>暴露出去的其实是</p><pre class="line-numbers language-none"><code class="language-none">&#123;    default:&#123;        a:100,        b:10    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们引入的时候如果写</p><pre class="line-numbers language-none"><code class="language-none">import obj from &#39;.&#x2F;xxx.js&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么<code>obj.a=100</code>,<code>obj.b=10</code></p><blockquote><p>注意默认暴露只能写一次</p></blockquote><hr><h2 id="2-部分暴露"><a href="#2-部分暴露" class="headerlink" title="2. 部分暴露"></a>2. 部分暴露</h2><p>部分暴露出去的同样是对象，例如如下</p><pre class="line-numbers language-none"><code class="language-none">export let a &#x3D; 1;export let obj &#x3D; &#123;    a:10,    b:100&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么暴露出去的对象为如下</p><pre class="line-numbers language-none"><code class="language-none">&#123;    a,    obj&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>所以引入的时候进行解构</p><pre class="line-numbers language-none"><code class="language-none">import &#123;a, obj&#125; from &#39;.&#x2F;xxx.js&#39;&#x2F;&#x2F; a &#x3D; 1&#x2F;&#x2F; obj &#x3D; &#123;    a:10,    b:100&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="3-整体暴露"><a href="#3-整体暴露" class="headerlink" title="3. 整体暴露"></a>3. 整体暴露</h2><p>整体暴露出去的同样是对象，如下例</p><pre class="line-numbers language-none"><code class="language-none">let a &#x3D; 1;let obj &#x3D; &#123;    a:10,    b:100&#125;export &#123;a,obj&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>export后面是什么，整体暴露出去的就是什么<br>引入方式和部分暴露一样</p><blockquote><p>其实整体暴露就是部分暴露的简化写法，不用再写那么多export罢了</p></blockquote><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>无论是什么方式暴露，暴露出去的都是对象，只不过对象的形成方式不同。默认暴露是以default为键，后面的值为值的对象。部分暴露是把所有暴露的变量封装到一个对象中，整体暴露是我们自己封装了对象暴露出去。</li><li>无论是什么方式暴露，想要直接拿到暴露出去的对象（而不是解构的一部分）那么写法是<pre class="line-numbers language-none"><code class="language-none">import * as obj from &#39;.&#x2F;xxx.js&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>例如<pre class="line-numbers language-none"><code class="language-none">export const a &#x3D; ()&#x3D;&gt;&#123;&#125;export const b &#x3D; ()&#x3D;&gt;&#123;&#125;import * as $API from &#39;.&#x2F;xxx.js&#39;&#x2F;&#x2F; 使用函数$API.a()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从0开始css</title>
      <link href="/2021/11/16/cong-0-kai-shi-css/"/>
      <url>/2021/11/16/cong-0-kai-shi-css/</url>
      
        <content type="html"><![CDATA[<h1 id="从0开始css"><a href="#从0开始css" class="headerlink" title="从0开始css"></a>从0开始css</h1><hr><h2 id="1-圆角边框"><a href="#1-圆角边框" class="headerlink" title="1.圆角边框"></a>1.圆角边框</h2><ul><li>圆角边框可以通过css的属性<code>border-radius：length</code>来实现，其中的length为圆形与直角边相切半径</li><li>圆形盒子半径设为正方形一半即可，写 50%</li><li>圆角矩形设置为高度的50%</li></ul><blockquote><p>注意该属性为css3新增，可能有兼容性问题</p></blockquote><img src="/2021/11/16/cong-0-kai-shi-css/css-01.png" class=""><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;    &#x2F;* 圆角矩形做法 *&#x2F;    div.demo1 &#123;        width: 300px;        height: 150px;        background-color: pink;        &#x2F;* 圆角 *&#x2F;        border-radius: 75px;    &#125;    &#x2F;* 圆形做法 *&#x2F;    div.demo2 &#123;        width: 300px;        height: 300px;        background-color: pink;        &#x2F;* border-radius: 150px; *&#x2F;        border-radius: 50%;    &#125;    &#x2F;* 不同圆角做法 *&#x2F;    div.demo3 &#123;        width: 300px;        height: 300px;        background-color: pink;        &#x2F;* border-radius: 150px; *&#x2F;        border-radius: 10px 20px;    &#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2-盒子阴影"><a href="#2-盒子阴影" class="headerlink" title="2.盒子阴影"></a>2.盒子阴影</h2><ul><li>1.默认outset但是不要写，否则失效。</li><li>2.<strong>盒子阴影不占用空间，不影响其他盒子排列</strong></li><li>3.鼠标经过出现影子:hover做<img src="/2021/11/16/cong-0-kai-shi-css/css-02.png" class=""></li></ul><blockquote><p>该属性为css3新增</p></blockquote><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;        div &#123;            width: 200px;            height: 200px;            background-color: pink;            margin: 100px auto;        &#125;        div:hover &#123;            box-shadow: 10px 10px 10px -4px rgba(0, 0, 0, .3);        &#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="3-文字阴影"><a href="#3-文字阴影" class="headerlink" title="3.文字阴影"></a>3.文字阴影</h2><img src="/2021/11/16/cong-0-kai-shi-css/css-03.png" class=""><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;        div &#123;            font-size: 50px;            color: orange;            font-weight: 700;        &#125;        div:hover &#123;            text-shadow: 5px 5px 6px rgba(0, 0, 0, .3);        &#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="4-网页布局"><a href="#4-网页布局" class="headerlink" title="4.网页布局"></a>4.网页布局</h2><ul><li>网页布局准则：<strong>多个块级元素纵向排列找标准流，横向排列找浮动</strong></li><li>传统网页布局的本质就是用css来摆放盒子</li><li>css提供了三种传统布局方式，分别是<ul><li>1.普通流（标准流）</li><li>2.浮动</li><li>3.定位</li></ul></li></ul><hr><h2 id="5-标准流"><a href="#5-标准流" class="headerlink" title="5.标准流"></a>5.标准流</h2><img src="/2021/11/16/cong-0-kai-shi-css/css-04.png" class=""><hr><h2 id="6-浮动"><a href="#6-浮动" class="headerlink" title="6.浮动"></a>6.浮动</h2><img src="/2021/11/16/cong-0-kai-shi-css/css-05.png" class=""><h3 id="6-1浮动特性"><a href="#6-1浮动特性" class="headerlink" title="6.1浮动特性"></a>6.1浮动特性</h3><ol><li><strong>浮动元素会脱离标准流（脱标）</strong>，即脱离标准流的控制（浮）移动到指定位置（动）</li><li>浮动的元素会一行内显示并且元素顶部对齐</li><li>浮动的元素会具有行内块元素的特性</li><li>浮动的盒子<strong>不再保留原来的位置</strong></li><li>浮动的元素与定位不同，只会压住下面标准流动盒子，但是不会压住标准流盒子里的文字与图片（类似环绕效果）</li><li>浮动的盒子在同一行顶端对齐，相互贴靠没有缝隙。但是<strong>注意如果父盒子的宽度装不下浮动盒子，多动盒子会另起一行对齐</strong></li><li>浮动的元素具有行内块元素的特性，不用再<code>display:inline-block</code>,可以直接设置宽高。注意，块级盒子没有设置宽度时默认与父元素一样宽，但是添加浮动后<strong>大小根据浮动盒子的内容决定</strong>，这点与行内元素一样。<img src="/2021/11/16/cong-0-kai-shi-css/css-06.png" class=""></li></ol><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;        .box1 &#123;            width: 200px;            height: 200px;            background-color: pink;            &#x2F;* 脱标后位置被占有  *&#x2F;            float: left;        &#125;        .box2 &#123;            width: 300px;            height: 300px;            background-color: blue;        &#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2浮动元素搭配标准流父级元素"><a href="#6-2浮动元素搭配标准流父级元素" class="headerlink" title="6.2浮动元素搭配标准流父级元素"></a>6.2浮动元素搭配标准流父级元素</h3><ul><li>为了约束元素的位置我们通常采用先用标准流的父元素排列上下位置，再在内部使用浮动进行左右位置的排列<img src="/2021/11/16/cong-0-kai-shi-css/css-07.png" class=""></li></ul><h3 id="6-3浮动布局的注意点"><a href="#6-3浮动布局的注意点" class="headerlink" title="6.3浮动布局的注意点"></a>6.3浮动布局的注意点</h3><ol><li>先用标准流父元素上下排列，再在内部进行子元素浮动左右排列</li><li>一个元素浮动了理论上其余兄弟元素也要浮动。所谓<strong>一浮全浮</strong>。</li><li>浮动的盒子只影响后面的标准流盒子，不会影响之前的。</li></ol><h3 id="6-4清除浮动"><a href="#6-4清除浮动" class="headerlink" title="6.4清除浮动"></a>6.4清除浮动</h3><h4 id="6-4-1为什么要清除浮动"><a href="#6-4-1为什么要清除浮动" class="headerlink" title="6.4.1为什么要清除浮动"></a>6.4.1为什么要清除浮动</h4><p>由于父级盒子在很多情况下不方便设定高度，但是子盒子浮动不占有位置，导致父盒子会影响下面的标准流盒子。</p><img src="/2021/11/16/cong-0-kai-shi-css/css-08.png" class=""><h4 id="6-4-2清除浮动的本质"><a href="#6-4-2清除浮动的本质" class="headerlink" title="6.4.2清除浮动的本质"></a>6.4.2清除浮动的本质</h4><ul><li>清除浮动的本质是清除浮动元素造成的影响</li><li>如果父盒子本身设定了高度，就不需要清除浮动</li><li>清除浮动后，父级会根据浮动的子盒子自动监测高度，父级有了高度就不会影响下面的标准流盒子。</li></ul><h4 id="6-4-3清除浮动的方法"><a href="#6-4-3清除浮动的方法" class="headerlink" title="6.4.3清除浮动的方法"></a>6.4.3清除浮动的方法</h4><ol><li><strong>额外标签法</strong><br>在浮动的元素末尾添加一个空标签。例如<code>&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</code>,或者其他标签（如<code>&lt;br/&gt;</code>）</li></ol><ul><li>优点：通俗易懂，书写方便</li><li>缺点：添加了许多无意义表情，结构化差</li></ul><ol start="2"><li><strong>父级添加overflow</strong><br>可以给父级添加<code>overflow</code>属性，属性值可以为<code>hidden</code>、<code>auto</code>或<code>scroll</code></li></ol><ul><li>优点：代码简介</li><li>缺点：无法显示溢出的部分</li></ul><ol start="3"><li><p><strong>父级:after伪元素法</strong><br><code>:after</code>方法是额外标签法的升级版，是给父元素添加。该写法结构简单，写法高级。</p><pre class="line-numbers language-none"><code class="language-none">.clearfix:after &#123;    content:&quot;&quot;;    display:block;    height:0;    clear:both;    visibility:hidden;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>父级双伪元素清除浮动</strong></p></li></ol><ul><li>推荐使用该写法<pre class="line-numbers language-none"><code class="language-none">.clearfix:before,.clearfix:after &#123;    content:&quot;&quot;;    display:table;&#125;.clearfix:after &#123;    clear:both&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>注意IE6-7不支持after，会有兼容性问题（但是IE已经快消失了，所以问题不大）</p></blockquote><hr><h2 id="7-定位"><a href="#7-定位" class="headerlink" title="7.定位"></a>7.定位</h2><h3 id="7-1什么时候需要用定位"><a href="#7-1什么时候需要用定位" class="headerlink" title="7.1什么时候需要用定位"></a>7.1什么时候需要用定位</h3><p>浮动可以让多个块级盒子一行没有缝隙排列显示，常用于横向排列盒子。而定位是让盒子自由地在某个盒子内移动位置或者固定在屏幕的某个位置。</p><h3 id="7-2定位的组成"><a href="#7-2定位的组成" class="headerlink" title="7.2定位的组成"></a>7.2定位的组成</h3><p>定位=定位模式+边偏移<br><strong>定位模式</strong>用于指定某个元素在文档中的定位方式。<strong>边偏移</strong>决定了该盒子的最终位置。</p><h3 id="7-3-定位模式"><a href="#7-3-定位模式" class="headerlink" title="7.3 定位模式"></a>7.3 定位模式</h3><h4 id="7-3-1静态定位static（了解）"><a href="#7-3-1静态定位static（了解）" class="headerlink" title="7.3.1静态定位static（了解）"></a>7.3.1静态定位static（了解）</h4><p>静态定位是元素的默认定位方式，无定位的意思。</p><ul><li>静态定位按照标准流特性摆放位置，没有边偏移</li><li>静态定位在布局中很少用到<pre class="line-numbers language-none"><code class="language-none">&lt;!-- div位置是选择器，下文同 --&gt;div &#123;    position:static;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="7-3-2相对定位relative（重要）"><a href="#7-3-2相对定位relative（重要）" class="headerlink" title="7.3.2相对定位relative（重要）"></a>7.3.2相对定位relative（重要）</h4><p>相对定位是元素在移动位置的时候，相对于它<strong>原来的位置</strong>来说的</p><ul><li>相对定位移动位置时的参照点是自己</li><li>相对定位的盒子在标准流中的位置会<strong>继续占有</strong>，后面的盒子仍然以标准流的方式对待它（不会脱标）</li><li>因为不会脱标，所以可以用<code>margin：auto</code>来进行水平居中对齐<pre class="line-numbers language-none"><code class="language-none">div &#123;    position:relative&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="7-3-3绝对定位absolute（重要）"><a href="#7-3-3绝对定位absolute（重要）" class="headerlink" title="7.3.3绝对定位absolute（重要）"></a>7.3.3绝对定位absolute（重要）</h4><p>绝对定位是元素移动位置的时候，是相对于它的<strong>祖先元素</strong>来的。</p><ul><li>如果<strong>没有祖先元素</strong>或者<strong>祖先元素</strong>没有定位，则该元素以浏览器为准定位</li><li>如果祖先元素有定位（相对、绝对、固定定位），则以最近一级有定位的祖先元素为参考点移动位置</li><li><strong>绝对定位不再占有原来的位置（脱标）</strong><pre class="line-numbers language-none"><code class="language-none">div &#123;    position:absolute;    top:50px;    left:50px&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="7-3-4固定定位fixed（重要）"><a href="#7-3-4固定定位fixed（重要）" class="headerlink" title="7.3.4固定定位fixed（重要）"></a>7.3.4固定定位fixed（重要）</h4><p>固定定位是元素固定于<strong>浏览器可视区</strong>的位置。主要使用场景：浏览器页面滚动时元素位置不产生变化</p><ul><li>固定定位以浏览器可视窗口为参照点移动元素，<strong>与父元素没有关系</strong>，<strong>不随滚动条滚动</strong></li><li>固定定位也是<strong>脱标</strong>的，固定定位可以看作是一种特殊的绝对定位<pre class="line-numbers language-none"><code class="language-none">div &#123;    position:fixed;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="7-3-5粘性定位stiky（了解）"><a href="#7-3-5粘性定位stiky（了解）" class="headerlink" title="7.3.5粘性定位stiky（了解）"></a>7.3.5粘性定位stiky（了解）</h4><p>粘性定位可以看作是相对定位于固定定位的结合</p><ul><li>粘性定位以浏览器的可视窗口为参照点移动元素</li><li>粘性定位<strong>不脱标</strong>，占有原先的位置</li><li>必须添加至少一个偏移量才生效<pre class="line-numbers language-none"><code class="language-none">div &#123;    position:sticky;    top:10px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="7-3-6边偏移"><a href="#7-3-6边偏移" class="headerlink" title="7.3.6边偏移"></a>7.3.6边偏移</h4><img src="/2021/11/16/cong-0-kai-shi-css/css-09.png" class=""><h4 id="7-3-7子绝夫相是什么"><a href="#7-3-7子绝夫相是什么" class="headerlink" title="7.3.7子绝夫相是什么"></a>7.3.7子绝夫相是什么</h4><p>子绝夫相的意思就是<strong>子级是绝对定位的话，父级要用相对定位</strong></p><ul><li>子盒子绝对定位不占位置，可以放到父盒子的任意地方，不会影响兄弟盒子</li><li>父盒子需要添加定位，限制子盒子在父盒子内显示</li><li>父盒子布局的时候需要占有位置，因此是相对定位</li><li>子绝父绝也会出现，但是父元素的父元素一定是相对定位<pre class="line-numbers language-none"><code class="language-none">&lt;!-- 采用less语法 --&gt;.father &#123;    position:relative;    .son &#123;        position:absolute;        top:10px;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="7-3-8定位叠放次序-z-index"><a href="#7-3-8定位叠放次序-z-index" class="headerlink" title="7.3.8定位叠放次序 z-index"></a>7.3.8定位叠放次序 z-index</h4><p>使用定位布局的时候可能会出现盒子重叠的情况。此时可以使用z-index来控制盒子的前后次序</p><ul><li>数值可以是正整数、负整数或0，数值越大盒子越靠上</li><li>属性值相同的话，后来居上，以后书写的为准</li><li>数字后面不可以加单位</li><li>只有定位的盒子才有z-index属性<pre class="line-numbers language-none"><code class="language-none">.father &#123;    position:relative;    .son1 &#123;        position:absolute;        top:0;        z-index:0;    &#125;    .son2 &#123;        position:absolute;        top:0;        z-index:1;    &#125;    &lt;!-- 子盒子2会在1上面 --&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="7-4关于定位的其他"><a href="#7-4关于定位的其他" class="headerlink" title="7.4关于定位的其他"></a>7.4关于定位的其他</h3><ol><li>绝对定位的盒子水平居中<br>加了绝对定位的盒子不能通过<code>margin:0 auto</code>进行水平居中，但是可以通过以下的计算方法实现水平居中<pre class="line-numbers language-none"><code class="language-none">.son &#123;    position:absolute;    &lt;!-- 盒子左侧移动到父元素水平中心 --&gt;    left:50%    &lt;!-- 盒子水平向左移动自身50%宽度 --&gt;    transform:transitionX(-50%)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>定位的特殊特性</li></ol><ul><li>行内元素添加绝对或者固定定位，可以直接设置高度和宽度</li><li>块级元素添加绝对或者固定定位，如果不给宽度或高度默认大小是内容的大小</li></ul><ol start="3"><li>脱标的盒子不会触发外边距塌陷</li></ol><ul><li>浮动元素、绝对定位（固定定位）元素都不会出发外边距合并的问题</li></ul><blockquote><p>关于外边距塌陷的解释：<br>1.当上下相邻的两个块级元素相遇，上面的元素有下边距margin-bottom，下面的元素有上边距margin-top，则它们之间的垂直距离取两个值中的较大者。<br>2.对于两个嵌套关系的块元素，如果父元素没有上内边距及边框，父元素的上外边距会与子元素的上外边距发生合并，合并后的外边距为两者中的较大者。</p></blockquote><ol start="4"><li>绝对定位会完全压住盒子<br>与浮动不同，浮动类似于环绕，不会压住文字图片，但是绝对定位会完全压住。</li></ol><hr><h2 id="8-元素的显示与隐藏"><a href="#8-元素的显示与隐藏" class="headerlink" title="8.元素的显示与隐藏"></a>8.元素的显示与隐藏</h2><h3 id="8-1display"><a href="#8-1display" class="headerlink" title="8.1display"></a>8.1display</h3><ul><li><code>display：none</code>:隐藏对象</li><li><code>display:block</code>:除了转换为块级元素外，同时还有显示元素的意思<br>注意，<strong>display隐藏元素后，元素不再占有原来的位置！</strong></li></ul><h3 id="8-2visibility"><a href="#8-2visibility" class="headerlink" title="8.2visibility"></a>8.2visibility</h3><ul><li><code>visibility:visble</code>:元素可视</li><li><code>visibility：hidden</code>:元素隐藏<br>注意，<strong>visibility隐藏元素后，元素会占有原来的位置！</strong></li></ul><h3 id="8-3overflow溢出"><a href="#8-3overflow溢出" class="headerlink" title="8.3overflow溢出"></a>8.3overflow溢出</h3><ul><li><code>overflow:visible</code>:不剪切内容也不添加滚动条</li><li><code>overflow:hidden</code>:不显示超过对象尺寸的内容，超出的部分被隐藏</li><li><code>overflow:scroll</code>:不管超出内容与否，总是显示滚动条</li><li><code>overflow:auto</code>:超出自动显示滚动条，不超出则不显示</li></ul><blockquote><p>需要注意的是定位后需要谨慎使用overflow，它有可能会剪切你的元素的一部分</p></blockquote><h2 id="本文结束"><a href="#本文结束" class="headerlink" title="本文结束"></a>本文结束</h2>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>示例文章</title>
      <link href="/2021/11/15/shi-li-wen-zhang/"/>
      <url>/2021/11/15/shi-li-wen-zhang/</url>
      
        <content type="html"><![CDATA[<h1 id="百年孤独"><a href="#百年孤独" class="headerlink" title="百年孤独"></a>百年孤独</h1><hr><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><blockquote><p>这是区块引用</p></blockquote><p><a href="http://www.100niangudu.com/4.html">点击在线阅读</a><br><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.mp.sohu.com%2Fupload%2F20170605%2F94bd907beefc45cd92c374f8c15770c9.png&refer=http%3A%2F%2Fimg.mp.sohu.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1639655210&t=8896f0d726b279b9f6515dc656434b44" width=200><br>&emsp;&emsp;多年以后，奥雷连诺上校站在行刑队面前，准会想起父亲带他去参观冰块的那个遥远的下午。当时，马孔多是个二十户人家的村庄，一座座土房都盖在河岸上，河水清澈，沿着遍布石头的河床流去，河里的石头光滑、洁白，活象史前的巨蛋。<br>&emsp;&emsp;这块天地还是新开辟的，许多东西都叫不出名字，不得不用手指指点点。每年三月，衣衫褴楼的吉卜赛人都要在村边搭起帐篷，在笛鼓的喧嚣声中，向马孔多的居民介绍科学家的最新发明。他们首先带来的是磁铁。一个身躯高大的吉卜赛人，自称梅尔加德斯，满脸络腮胡子，手指瘦得象鸟的爪子，向观众出色地表演了他所谓 的马其顿炼金术士创造的世界第八奇迹。他手里拿着两大块磁铁，从一座农舍走到另一座农舍，大家都惊异地看见，铁锅、铁盆、铁钳、铁炉都从原地倒下，木板上的钉子和螺丝嘎吱嘎吱地拼命想挣脱出来，甚至那些早就丢失的东西也从找过多次的地方兀然出现，乱七八糟地跟在梅尔加德斯的魔铁后面。“东西也是有生命的，”</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的博客第一篇文章</title>
      <link href="/2021/11/15/article-title/"/>
      <url>/2021/11/15/article-title/</url>
      
        <content type="html"><![CDATA[<p>你好哇你好哇 欢迎来到我的博客</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/15/hello-world/"/>
      <url>/2021/11/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
